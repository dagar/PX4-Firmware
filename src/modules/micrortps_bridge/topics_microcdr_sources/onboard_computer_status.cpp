/****************************************************************************
 *
 *   Copyright (C) 2013-2021 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/dagar/git/PX4-Autopilot_upstream/msg/onboard_computer_status.msg */


#include <px4_platform_common/px4_config.h>
#include <ucdr/microcdr.h>
#include <uORB/topics/onboard_computer_status.h>
#include <uORB_microcdr/topics/onboard_computer_status.h>


void serialize_onboard_computer_status(ucdrBuffer *writer, const struct onboard_computer_status_s *input, char *output, uint32_t *length)
{
    if (nullptr == writer || nullptr == input || nullptr == output || nullptr == length)
	return;

    ucdr_reset_buffer(writer);

    ucdr_serialize_uint64_t(writer, input->timestamp);
    ucdr_serialize_uint32_t(writer, input->uptime);
    ucdr_serialize_uint8_t(writer, input->type);
    ucdr_serialize_array_uint8_t(writer, input->cpu_cores, 8);
    ucdr_serialize_array_uint8_t(writer, input->cpu_combined, 10);
    ucdr_serialize_array_uint8_t(writer, input->gpu_cores, 4);
    ucdr_serialize_array_uint8_t(writer, input->gpu_combined, 10);
    ucdr_serialize_int8_t(writer, input->temperature_board);
    ucdr_serialize_array_int8_t(writer, input->temperature_core, 8);
    ucdr_serialize_array_int16_t(writer, input->fan_speed, 4);
    ucdr_serialize_uint32_t(writer, input->ram_usage);
    ucdr_serialize_uint32_t(writer, input->ram_total);
    ucdr_serialize_array_uint32_t(writer, input->storage_type, 4);
    ucdr_serialize_array_uint32_t(writer, input->storage_usage, 4);
    ucdr_serialize_array_uint32_t(writer, input->storage_total, 4);
    ucdr_serialize_array_uint32_t(writer, input->link_type, 6);
    ucdr_serialize_array_uint32_t(writer, input->link_tx_rate, 6);
    ucdr_serialize_array_uint32_t(writer, input->link_rx_rate, 6);
    ucdr_serialize_array_uint32_t(writer, input->link_tx_max, 6);
    ucdr_serialize_array_uint32_t(writer, input->link_rx_max, 6);

    (*length) = ucdr_buffer_length(writer);
}

void deserialize_onboard_computer_status(ucdrBuffer *reader, struct onboard_computer_status_s *output, const char *input)
{
    if (nullptr == reader || nullptr == output || nullptr == input)
	return;

    ucdr_reset_buffer(reader);

    ucdr_deserialize_uint64_t(reader, &output->timestamp);
    ucdr_deserialize_uint32_t(reader, &output->uptime);
    ucdr_deserialize_uint8_t(reader, &output->type);
    ucdr_deserialize_array_uint8_t(reader, output->cpu_cores, 8);
    ucdr_deserialize_array_uint8_t(reader, output->cpu_combined, 10);
    ucdr_deserialize_array_uint8_t(reader, output->gpu_cores, 4);
    ucdr_deserialize_array_uint8_t(reader, output->gpu_combined, 10);
    ucdr_deserialize_int8_t(reader, &output->temperature_board);
    ucdr_deserialize_array_int8_t(reader, output->temperature_core, 8);
    ucdr_deserialize_array_int16_t(reader, output->fan_speed, 4);
    ucdr_deserialize_uint32_t(reader, &output->ram_usage);
    ucdr_deserialize_uint32_t(reader, &output->ram_total);
    ucdr_deserialize_array_uint32_t(reader, output->storage_type, 4);
    ucdr_deserialize_array_uint32_t(reader, output->storage_usage, 4);
    ucdr_deserialize_array_uint32_t(reader, output->storage_total, 4);
    ucdr_deserialize_array_uint32_t(reader, output->link_type, 6);
    ucdr_deserialize_array_uint32_t(reader, output->link_tx_rate, 6);
    ucdr_deserialize_array_uint32_t(reader, output->link_rx_rate, 6);
    ucdr_deserialize_array_uint32_t(reader, output->link_tx_max, 6);
    ucdr_deserialize_array_uint32_t(reader, output->link_rx_max, 6);

}
