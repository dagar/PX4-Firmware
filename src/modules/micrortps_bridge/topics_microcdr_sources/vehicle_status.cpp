/****************************************************************************
 *
 *   Copyright (C) 2013-2021 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/dagar/git/PX4-Autopilot_upstream/msg/vehicle_status.msg */


#include <px4_platform_common/px4_config.h>
#include <ucdr/microcdr.h>
#include <uORB/topics/vehicle_status.h>
#include <uORB_microcdr/topics/vehicle_status.h>


void serialize_vehicle_status(ucdrBuffer *writer, const struct vehicle_status_s *input, char *output, uint32_t *length)
{
    if (nullptr == writer || nullptr == input || nullptr == output || nullptr == length)
	return;

    ucdr_reset_buffer(writer);

    ucdr_serialize_uint64_t(writer, input->timestamp);
    ucdr_serialize_uint8_t(writer, input->nav_state);
    ucdr_serialize_uint64_t(writer, input->nav_state_timestamp);
    ucdr_serialize_uint8_t(writer, input->arming_state);
    ucdr_serialize_uint8_t(writer, input->hil_state);
    ucdr_serialize_bool(writer, input->failsafe);
    ucdr_serialize_uint64_t(writer, input->failsafe_timestamp);
    ucdr_serialize_uint8_t(writer, input->system_type);
    ucdr_serialize_uint8_t(writer, input->system_id);
    ucdr_serialize_uint8_t(writer, input->component_id);
    ucdr_serialize_uint8_t(writer, input->vehicle_type);
    ucdr_serialize_bool(writer, input->is_vtol);
    ucdr_serialize_bool(writer, input->is_vtol_tailsitter);
    ucdr_serialize_bool(writer, input->vtol_fw_permanent_stab);
    ucdr_serialize_bool(writer, input->in_transition_mode);
    ucdr_serialize_bool(writer, input->in_transition_to_fw);
    ucdr_serialize_bool(writer, input->rc_signal_lost);
    ucdr_serialize_bool(writer, input->data_link_lost);
    ucdr_serialize_uint8_t(writer, input->data_link_lost_counter);
    ucdr_serialize_bool(writer, input->high_latency_data_link_lost);
    ucdr_serialize_bool(writer, input->engine_failure);
    ucdr_serialize_bool(writer, input->mission_failure);
    ucdr_serialize_bool(writer, input->geofence_violated);
    ucdr_serialize_uint8_t(writer, input->failure_detector_status);
    ucdr_serialize_uint64_t(writer, input->onboard_control_sensors_present);
    ucdr_serialize_uint64_t(writer, input->onboard_control_sensors_enabled);
    ucdr_serialize_uint64_t(writer, input->onboard_control_sensors_health);
    ucdr_serialize_uint8_t(writer, input->latest_arming_reason);
    ucdr_serialize_uint8_t(writer, input->latest_disarming_reason);
    ucdr_serialize_uint64_t(writer, input->armed_time);
    ucdr_serialize_uint64_t(writer, input->takeoff_time);

    (*length) = ucdr_buffer_length(writer);
}

void deserialize_vehicle_status(ucdrBuffer *reader, struct vehicle_status_s *output, const char *input)
{
    if (nullptr == reader || nullptr == output || nullptr == input)
	return;

    ucdr_reset_buffer(reader);

    ucdr_deserialize_uint64_t(reader, &output->timestamp);
    ucdr_deserialize_uint8_t(reader, &output->nav_state);
    ucdr_deserialize_uint64_t(reader, &output->nav_state_timestamp);
    ucdr_deserialize_uint8_t(reader, &output->arming_state);
    ucdr_deserialize_uint8_t(reader, &output->hil_state);
    ucdr_deserialize_bool(reader, &output->failsafe);
    ucdr_deserialize_uint64_t(reader, &output->failsafe_timestamp);
    ucdr_deserialize_uint8_t(reader, &output->system_type);
    ucdr_deserialize_uint8_t(reader, &output->system_id);
    ucdr_deserialize_uint8_t(reader, &output->component_id);
    ucdr_deserialize_uint8_t(reader, &output->vehicle_type);
    ucdr_deserialize_bool(reader, &output->is_vtol);
    ucdr_deserialize_bool(reader, &output->is_vtol_tailsitter);
    ucdr_deserialize_bool(reader, &output->vtol_fw_permanent_stab);
    ucdr_deserialize_bool(reader, &output->in_transition_mode);
    ucdr_deserialize_bool(reader, &output->in_transition_to_fw);
    ucdr_deserialize_bool(reader, &output->rc_signal_lost);
    ucdr_deserialize_bool(reader, &output->data_link_lost);
    ucdr_deserialize_uint8_t(reader, &output->data_link_lost_counter);
    ucdr_deserialize_bool(reader, &output->high_latency_data_link_lost);
    ucdr_deserialize_bool(reader, &output->engine_failure);
    ucdr_deserialize_bool(reader, &output->mission_failure);
    ucdr_deserialize_bool(reader, &output->geofence_violated);
    ucdr_deserialize_uint8_t(reader, &output->failure_detector_status);
    ucdr_deserialize_uint64_t(reader, &output->onboard_control_sensors_present);
    ucdr_deserialize_uint64_t(reader, &output->onboard_control_sensors_enabled);
    ucdr_deserialize_uint64_t(reader, &output->onboard_control_sensors_health);
    ucdr_deserialize_uint8_t(reader, &output->latest_arming_reason);
    ucdr_deserialize_uint8_t(reader, &output->latest_disarming_reason);
    ucdr_deserialize_uint64_t(reader, &output->armed_time);
    ucdr_deserialize_uint64_t(reader, &output->takeoff_time);

}
