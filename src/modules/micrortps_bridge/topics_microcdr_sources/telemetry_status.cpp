/****************************************************************************
 *
 *   Copyright (C) 2013-2021 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/dagar/git/PX4-Autopilot_upstream/msg/telemetry_status.msg */


#include <px4_platform_common/px4_config.h>
#include <ucdr/microcdr.h>
#include <uORB/topics/telemetry_status.h>
#include <uORB_microcdr/topics/telemetry_status.h>


void serialize_telemetry_status(ucdrBuffer *writer, const struct telemetry_status_s *input, char *output, uint32_t *length)
{
    if (nullptr == writer || nullptr == input || nullptr == output || nullptr == length)
	return;

    ucdr_reset_buffer(writer);

    ucdr_serialize_uint64_t(writer, input->timestamp);
    ucdr_serialize_uint8_t(writer, input->type);
    ucdr_serialize_uint8_t(writer, input->mode);
    ucdr_serialize_bool(writer, input->flow_control);
    ucdr_serialize_bool(writer, input->forwarding);
    ucdr_serialize_bool(writer, input->mavlink_v2);
    ucdr_serialize_bool(writer, input->ftp);
    ucdr_serialize_uint8_t(writer, input->streams);
    ucdr_serialize_float(writer, input->data_rate);
    ucdr_serialize_float(writer, input->rate_multiplier);
    ucdr_serialize_float(writer, input->tx_rate_avg);
    ucdr_serialize_float(writer, input->tx_error_rate_avg);
    ucdr_serialize_uint32_t(writer, input->tx_message_count);
    ucdr_serialize_uint32_t(writer, input->tx_buffer_overruns);
    ucdr_serialize_float(writer, input->rx_rate_avg);
    ucdr_serialize_uint32_t(writer, input->rx_message_count);
    ucdr_serialize_uint32_t(writer, input->rx_message_lost_count);
    ucdr_serialize_uint32_t(writer, input->rx_buffer_overruns);
    ucdr_serialize_uint32_t(writer, input->rx_parse_errors);
    ucdr_serialize_uint32_t(writer, input->rx_packet_drop_count);
    ucdr_serialize_float(writer, input->rx_message_lost_rate);
    ucdr_serialize_bool(writer, input->heartbeat_type_antenna_tracker);
    ucdr_serialize_bool(writer, input->heartbeat_type_gcs);
    ucdr_serialize_bool(writer, input->heartbeat_type_onboard_controller);
    ucdr_serialize_bool(writer, input->heartbeat_type_gimbal);
    ucdr_serialize_bool(writer, input->heartbeat_type_adsb);
    ucdr_serialize_bool(writer, input->heartbeat_type_camera);
    ucdr_serialize_bool(writer, input->heartbeat_type_parachute);
    ucdr_serialize_bool(writer, input->heartbeat_component_telemetry_radio);
    ucdr_serialize_bool(writer, input->heartbeat_component_log);
    ucdr_serialize_bool(writer, input->heartbeat_component_osd);
    ucdr_serialize_bool(writer, input->heartbeat_component_obstacle_avoidance);
    ucdr_serialize_bool(writer, input->heartbeat_component_vio);
    ucdr_serialize_bool(writer, input->heartbeat_component_pairing_manager);
    ucdr_serialize_bool(writer, input->heartbeat_component_udp_bridge);
    ucdr_serialize_bool(writer, input->heartbeat_component_uart_bridge);
    ucdr_serialize_bool(writer, input->avoidance_system_healthy);
    ucdr_serialize_bool(writer, input->parachute_system_healthy);

    (*length) = ucdr_buffer_length(writer);
}

void deserialize_telemetry_status(ucdrBuffer *reader, struct telemetry_status_s *output, const char *input)
{
    if (nullptr == reader || nullptr == output || nullptr == input)
	return;

    ucdr_reset_buffer(reader);

    ucdr_deserialize_uint64_t(reader, &output->timestamp);
    ucdr_deserialize_uint8_t(reader, &output->type);
    ucdr_deserialize_uint8_t(reader, &output->mode);
    ucdr_deserialize_bool(reader, &output->flow_control);
    ucdr_deserialize_bool(reader, &output->forwarding);
    ucdr_deserialize_bool(reader, &output->mavlink_v2);
    ucdr_deserialize_bool(reader, &output->ftp);
    ucdr_deserialize_uint8_t(reader, &output->streams);
    ucdr_deserialize_float(reader, &output->data_rate);
    ucdr_deserialize_float(reader, &output->rate_multiplier);
    ucdr_deserialize_float(reader, &output->tx_rate_avg);
    ucdr_deserialize_float(reader, &output->tx_error_rate_avg);
    ucdr_deserialize_uint32_t(reader, &output->tx_message_count);
    ucdr_deserialize_uint32_t(reader, &output->tx_buffer_overruns);
    ucdr_deserialize_float(reader, &output->rx_rate_avg);
    ucdr_deserialize_uint32_t(reader, &output->rx_message_count);
    ucdr_deserialize_uint32_t(reader, &output->rx_message_lost_count);
    ucdr_deserialize_uint32_t(reader, &output->rx_buffer_overruns);
    ucdr_deserialize_uint32_t(reader, &output->rx_parse_errors);
    ucdr_deserialize_uint32_t(reader, &output->rx_packet_drop_count);
    ucdr_deserialize_float(reader, &output->rx_message_lost_rate);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_antenna_tracker);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_gcs);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_onboard_controller);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_gimbal);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_adsb);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_camera);
    ucdr_deserialize_bool(reader, &output->heartbeat_type_parachute);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_telemetry_radio);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_log);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_osd);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_obstacle_avoidance);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_vio);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_pairing_manager);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_udp_bridge);
    ucdr_deserialize_bool(reader, &output->heartbeat_component_uart_bridge);
    ucdr_deserialize_bool(reader, &output->avoidance_system_healthy);
    ucdr_deserialize_bool(reader, &output->parachute_system_healthy);

}
